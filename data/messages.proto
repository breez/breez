syntax = "proto3";

package data;

message ChainStatus {
    uint32 blockHeight = 1;
    bool syncedToChain = 2;
}

message Account {
    enum AccountStatus {        
        DISCONNECTED = 0;        
        PROCESSING_CONNECTION = 1;
        CLOSING_CONNECTION = 2;
        CONNECTED = 3;
    }
    string id = 1;
    int64 balance = 2;      
    int64 walletBalance = 3;
    AccountStatus status = 4;   

    //maximum payment this node can receive via lightning  
    int64 maxAllowedToReceive = 5;

    //maximum payment this node can pay via lightning    
    int64 maxAllowedToPay = 6;

    //The lightning absolute payment amount
    int64 maxPaymentAmount = 7;   

    //The routing node fee as reflected in the node policy
    int64 routingNodeFee = 8;

    //the state of the account, if not enabled then no automatic
    //attempt to open a channel with breez node will be made.
    bool enabled = 9;

    //maximum chan reserve accross all channels of this account.
    int64 maxChanReserve = 10;   

    //The funding transaction id of the channel.
    string channelPoint = 11;

    // reflects if this account can receive/send payments.
    bool readyForPayments = 12;
}

message Payment {
    enum PaymentType { 
        DEPOSIT = 0;
        WITHDRAWAL = 1;
        SENT = 2;
        RECEIVED = 3; 
    }
    
    PaymentType type = 1;    
    int64 amount = 3;
    int64 creationTimestamp = 4;    
    InvoiceMemo invoiceMemo = 6;
    string redeemTxID = 7;
    string paymentHash = 8;
    string destination = 9;
    uint32 PendingExpirationHeight = 10;
    int64 PendingExpirationTimestamp = 11;
    int64 fee = 12;
    string preimage = 13;
}

message PaymentsList {
    repeated Payment paymentsList = 1;
}

message PaymentResponse {
    string paymentError = 1;
    string traceReport = 2;
}

message SendWalletCoinsRequest {
    string address = 1;    
    int64 satPerByteFee = 2;    
}

message PayInvoiceRequest {
    int64 amount = 1;
    string paymentRequest = 2;
}

message InvoiceMemo {
    string description = 1;
    int64 amount = 2;
    string payeeName = 3;
    string payeeImageURL = 4;    
    string payerName = 5;
    string payerImageURL = 6;
    bool transferRequest = 7;
    int64 expiry = 8;
}

message Invoice {   
    InvoiceMemo memo = 1;
    bool settled = 2;    
    int64 amtPaid = 3;
}

message NotificationEvent {
    enum NotificationType {
        READY = 0;
        INITIALIZATION_FAILED = 1;        
        ACCOUNT_CHANGED = 2;        
        PAYMENT_SENT = 3;
        INVOICE_PAID = 4;        
        LIGHTNING_SERVICE_DOWN = 5;
        FUND_ADDRESS_CREATED = 6;
        FUND_ADDRESS_UNSPENT_CHANGED = 7;
        BACKUP_SUCCESS = 8;
        BACKUP_FAILED = 9;
        BACKUP_AUTH_FAILED = 10;
        BACKUP_NODE_CONFLICT = 11;
        BACKUP_REQUEST = 12;
    }

    NotificationType type = 1;
    repeated string data = 2;
}

message AddFundInitReply {
    string address = 1;
    int64 maxAllowedDeposit = 2;
    string errorMessage = 3;
    string backupJson = 4;
    int64 requiredReserve = 5;
}

message AddFundReply {
    string errorMessage = 1;
}

message RefundRequest {
    string address = 1;
    string refundAddress = 2;
    int32 target_conf = 3;
    int64 sat_per_byte = 4;
}

enum SwapError {
    NO_ERROR = 0;
    FUNDS_EXCEED_LIMIT = 1;
    TX_TOO_SMALL = 2;
    INVOICE_AMOUNT_MISMATCH = 3;
    SWAP_EXPIRED = 4;
}

message AddFundError {
    SwapAddressInfo swapAddressInfo = 1;
    float hoursToUnlock = 2;    
}

message FundStatusReply {
    repeated SwapAddressInfo unConfirmedAddresses = 1;
    repeated SwapAddressInfo confirmedAddresses = 2;
    repeated SwapAddressInfo refundableAddresses = 3;
}

message RemoveFundRequest {
  string address = 1;
  int64 amount = 2;
}

message RemoveFundReply{
  string txid = 1;  
  string errorMessage = 2;
}

message SwapAddressInfo {   
    string address = 1;
    string PaymentHash = 2;     
    int64 ConfirmedAmount = 3;
    repeated string ConfirmedTransactionIds = 4;
    int64 PaidAmount = 5;
    uint32 lockHeight = 6;
    string errorMessage = 7;
    string lastRefundTxID = 8;
    SwapError swapError = 9;
    string FundingTxID = 10;
    float hoursToUnlock = 11;
}

message SwapAddressList {
    repeated SwapAddressInfo addresses = 1;
}

message CreateRatchetSessionRequest {
    string secret = 1;
    string remotePubKey = 2;
    string sessionID = 3;
    uint64 expiry = 4;
}

message CreateRatchetSessionReply {
    string sessionID = 1;    
    string secret = 2;
    string pubKey = 3;
}

message RatchetSessionInfoReply {
    string sessionID = 1;
    bool initiated = 2;
    string userInfo = 3;
}

message RatchetSessionSetInfoRequest {
    string sessionID = 1;
    string userInfo = 2;
}

message RatchetEncryptRequest {
    string sessionID = 1;
    string message = 2;
}

message RatchetDecryptRequest {
    string sessionID = 1;
    string encryptedMessage = 2;
}

message BootstrapFilesRequest {
    string WorkingDir = 1;
    repeated string FullPaths = 2;
}

message Peers {
    bool isDefault = 1;
    repeated string peer = 2;
}

message TxSpentURL {
    string URL = 1;
    bool isDefault = 2;
    bool disabled = 3;
}

message rate {
    string coin = 1;
    double value = 2;
}
message Rates {
    repeated rate rates = 1;
}

message LSPInformation {
    /// The name of of lsp
    string name = 1;

    string widget_url = 2;

    /// The identity pubkey of the Lightning node
    string pubkey = 3;
    /// The network location of the lightning node, e.g. `12.34.56.78:9012` or `localhost:10011`
    string host = 4;

    /// The channel capacity in satoshis
    int64 channel_capacity = 5;
    /// The target number of blocks that the funding transaction should be confirmed by.
    int32 target_conf = 6;

    /// The base fee charged regardless of the number of milli-satoshis sent.
    int64 base_fee_msat = 7;
    /// The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
    double fee_rate = 8;
    /// The required timelock delta for HTLCs forwarded over the channel.
    uint32 time_lock_delta = 9;
    /// The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
    int64 min_htlc_msat = 10;
}
message LSPList {
    map<string, LSPInformation> lsps = 1; // The key is the lsp id
}

message LNUrlResponse {
    oneof action {
        LNUrlWithdraw withdraw = 1;
        LNUrlChannel channel = 2;
    }
}

message LNUrlWithdraw {
    int64 min_amount = 1;
    int64 max_amount = 2;
    string default_description = 3;
}

message LNUrlChannel {
    string RemoteNodeId = 1;
}
